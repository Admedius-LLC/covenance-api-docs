{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/card": {
      "get": {
        "description": "Get all of your cards",
        "parameters": [
          {
            "name": "subAccountId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": ["active", "paused", "inactive", "closed"]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorts card by creation date or name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "The direction to apply the sort filter by. Default ASC.",
            "schema": {
              "type": "string",
              "enum": ["ASC", "DESC"]
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for pagination",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "description": "Create a card",
        "requestBody": {
          "description": "Card to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCardBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/card/{cardId}": {
      "get": {
        "description": "Get the details for a single card by ID",
        "parameters": [
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_pan",
            "in": "query",
            "description": "Include PAN in card details",
            "schema": {
              "type": "string",
              "enum": ["true", "false"]
            }
          },
          {
            "name": "include_cvv",
            "in": "query",
            "description": "Include CVV in card details",
            "schema": {
              "type": "string",
              "enum": ["true", "false"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardWithPANAndCVV"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "description": "Update a card",
        "parameters": [
          {
            "name": "cardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCardBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transaction": {
      "get": {
        "description": "Get all transactions",
        "parameters": [
          {
            "name": "from_date",
            "in": "query",
            "description": "Unix timestamp in milliseconds. This will return all transactions that occurred on or after the date passed in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to_date",
            "in": "query",
            "description": "Unix timestamp in milliseconds. This will return all transactions that occurred on or before the date passed in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter transactions by detailed status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "canceled",
                "failed",
                "settled",
                "declined",
                "refund",
                "reversed",
                "returned",
                "dispute"
              ]
            }
          },
          {
            "name": "card_id",
            "in": "query",
            "description": "Filter transactions by card id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "A cursor string to fetch the next page of results",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/transaction/{transactionId}": {
      "get": {
        "description": "Get the details for a single transaction by ID",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sub-account": {
      "get": {
        "description": "Get all sub accounts",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSubAccountsResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "description": "Creates a new sub account",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sub-account/{subAccountId}": {
      "get": {
        "description": "Get the details for a single sub account by ID",
        "parameters": [
          {
            "name": "subAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubAccount"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    },
    "schemas": {
      "Card": {
        "required": [
          "id",
          "last4",
          "name",
          "expiryMonth",
          "expiryYear",
          "status",
          "createdAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Id of the card",
            "type": "string"
          },
          "last4": {
            "description": "Last 4 digits of the card number",
            "type": "string"
          },
          "name": {
            "description": "Name of the card holder",
            "type": "string"
          },
          "expiryMonth": {
            "description": "Expiry month of the card",
            "type": "string"
          },
          "expiryYear": {
            "description": "Expiry year of the card",
            "type": "string"
          },
          "status": {
            "description": "Status of the card",
            "type": "string",
            "enum": ["active", "paused", "inactive", "closed"]
          },
          "createdAt": {
            "description": "Creation date of the card",
            "type": "string",
            "format": "date-time"
          },
          "spendingConstraint": {
            "$ref": "#/components/schemas/SpendingConstraint"
          }
        }
      },
      "CardWithPANAndCVV": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Card"
          },
          {
            "type": "object",
            "properties": {
              "pan": {
                "description": "Pan of the card",
                "type": "string"
              },
              "cvv": {
                "description": "CVV of the card",
                "type": "string"
              }
            }
          }
        ]
      },
      "Transaction": {
        "required": [
          "id",
          "date",
          "description",
          "amountCents",
          "status",
          "referenceNumber",
          "authorizedAt",
          "status",
          "createdAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Identification of the transaction",
            "type": "string"
          },
          "date": {
            "description": "Date in UTC time when the transaction was posted",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "description": "Description of the transaction",
            "type": "string"
          },
          "merchantData": {
            "description": "For card transactions, contains description of the transaction as reported by the merchant and merchant category code. For other transactions, this field is undefined",
            "type": "object",
            "properties": {
              "description": {
                "description": "The raw description provided by the merchant for the transaction",
                "type": "string"
              },
              "categoryCode": {
                "description": "The merchant's category code (MCC)",
                "type": "string"
              }
            },
            "required": ["description", "categoryCode"]
          },
          "amountCents": {
            "description": "The amount of the transaction in cents in USD. If the transaction amount is negative, the transaction is a debit. If the transaction amount is positive, the transaction is a credit",
            "type": "number"
          },
          "status": {
            "description": "Status of the transaction",
            "type": "string",
            "enum": [
              "pending",
              "canceled",
              "failed",
              "settled",
              "declined",
              "refund",
              "reversed",
              "returned",
              "dispute"
            ]
          },
          "cardId": {
            "description": "Identification of the card",
            "type": "string"
          },
          "originalCurrency": {
            "description": "Original currency of the transaction",
            "type": "object",
            "properties": {
              "code": {
                "description": "Currency code",
                "type": "string"
              },
              "amountCents": {
                "description": "Amount of the transaction in cents",
                "type": "number"
              },
              "conversionRate": {
                "description": "Conversion rate",
                "type": "number"
              }
            }
          },
          "referenceNumber": {
            "description": "The reference number provided by Visa for this transaction",
            "type": "string"
          },
          "authorizedAt": {
            "description": "UTC timestamp of when the transaction was authorized. Only exists for card transactions",
            "type": "string",
            "format": "date-time"
          },
          "declineReason": {
            "description": "Decline reason of the transaction",
            "type": "string"
          }
        }
      },
      "SpendingConstraint": {
        "description": "Spending constraint of the card",
        "type": "object",
        "properties": {
          "spendingRule": {
            "type": "object",
            "properties": {
              "utilizationLimit": {
                "type": "object",
                "properties": {
                  "timezone": {
                    "type": "string"
                  },
                  "limitAmount": {
                    "type": "object",
                    "properties": {
                      "amountCents": {
                        "type": "number"
                      }
                    },
                    "required": ["amountCents"]
                  },
                  "preset": {
                    "type": "string",
                    "enum": [
                      "daily",
                      "weekly",
                      "monthly",
                      "yearly",
                      "collective"
                    ]
                  },
                  "startDate": {
                    "type": "string"
                  }
                },
                "required": ["preset"]
              },
              "transactionSizeLimit": {
                "type": "object",
                "properties": {
                  "minimum": {
                    "type": "object",
                    "properties": {
                      "amountCents": {
                        "type": "number"
                      }
                    },
                    "required": ["amountCents"]
                  },
                  "maximum": {
                    "type": "object",
                    "properties": {
                      "amountCents": {
                        "type": "number"
                      }
                    },
                    "required": ["amountCents"]
                  }
                }
              }
            }
          }
        }
      },
      "SubAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "balance": {
            "type": "object",
            "properties": {
              "amountCents": {
                "type": "number"
              }
            }
          },
          "spend": {
            "type": "object",
            "properties": {
              "amountCents": {
                "type": "number"
              }
            }
          }
        }
      },
      "UpdateCardBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["active", "paused", "inactive", "closed"]
          },
          "spendingConstraint": {
            "$ref": "#/components/schemas/SpendingConstraint"
          }
        }
      },
      "CreateCardBody": {
        "type": "object",
        "properties": {
          "subAccountId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "spendingConstraint": {
            "$ref": "#/components/schemas/SpendingConstraint"
          }
        },
        "required": ["name", "subAccountId"]
      },
      "GetTransactionResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "nextCursor": {
                "description": "The cursor to use to retrieve the next page of data. If this is not sent, there is no more data to retrieve",
                "type": "string"
              },
              "count": {
                "description": "The number of items in the current page of data",
                "type": "number"
              }
            }
          }
        }
      },
      "GetCardsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Card"
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "nextCursor": {
                "description": "The cursor to use to retrieve the next page of data. If this is not sent, there is no more data to retrieve",
                "type": "string"
              },
              "count": {
                "description": "The number of items in the current page of data",
                "type": "number"
              }
            }
          }
        }
      },
      "GetSubAccountsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubAccount"
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "nextCursor": {
                "description": "The cursor to use to retrieve the next page of data. If this is not sent, there is no more data to retrieve",
                "type": "string"
              },
              "count": {
                "description": "The number of items in the current page of data",
                "type": "number"
              }
            }
          }
        }
      },
      "ErrorWithId": {
        "required": ["id", "status", "code", "message"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "number"
          },
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ErrorWithNoId": {
        "required": ["status", "code", "message"],
        "type": "object",
        "properties": {
          "status": {
            "type": "number"
          },
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Error": {
        "required": ["error", "message"],
        "type": "object",
        "properties": {
          "error": {
            "type": "number"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Invalid Body/Query Parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorWithNoId"
            }
          }
        }
      },
      "403": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorWithNoId"
            }
          }
        }
      },
      "429": {
        "description": "Too many requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorWithNoId"
            }
          }
        }
      },
      "500": {
        "description": "Unidentified Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorWithNoId"
            }
          }
        }
      }
    }
  }
}
